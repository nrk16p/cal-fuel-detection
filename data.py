import pandas as pd

# ======================================================
# üß≠ 1Ô∏è‚É£ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
# ======================================================
df = df_all[['‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞', '‡∏£‡∏´‡∏±‡∏™‡∏û‡∏≤‡∏´‡∏ô‡∏∞', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
             '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î', '‡∏û‡∏¥‡∏Å‡∏±‡∏î', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß(‡∏Å‡∏°./‡∏ä‡∏°.)', '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á(‡∏Å‡∏°.)', '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞']]

# üïí ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå datetime ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
df["datetime"] = pd.to_datetime(
    df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].astype(str) + " " + df["‡πÄ‡∏ß‡∏•‡∏≤"].astype(str),
    dayfirst=True,  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    errors="coerce"  # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaT
)

# ======================================================
# üìä 2Ô∏è‚É£ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ô‡∏≤‡∏ó‡∏µ (Resample 5min)
# ======================================================
df = df.set_index('datetime')

df_result = df.resample('5min').agg({
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß(‡∏Å‡∏°./‡∏ä‡∏°.)': 'mean',  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á(‡∏Å‡∏°.)': 'sum',        # ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á
    '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô': 'mean'               # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
}).reset_index()

# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
df_result.columns = ['datetime5mins', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß(‡∏Å‡∏°./‡∏ä‡∏°.)avg', '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á(‡∏Å‡∏°.)avg', '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ôavg']

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (forward fill)
df_result = df_result.ffill()

# ======================================================
# üîÅ 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á/‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
# ======================================================
def diff_backward(df, col, minutes):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á n ‡∏ô‡∏≤‡∏ó‡∏µ)"""
    left = df[['datetime5mins', col]].copy()
    left['lookup_time'] = left['datetime5mins'] - pd.Timedelta(minutes=minutes)

    right = df[['datetime5mins', col]].rename(
        columns={'datetime5mins': 'dt_ref', col: f'{col}_ref'}
    ).sort_values('dt_ref')

    merged = pd.merge_asof(
        left.sort_values('lookup_time'),
        right, left_on='lookup_time', right_on='dt_ref',
        direction='backward', allow_exact_matches=True
    )

    return left[col].values - merged[f'{col}_ref'].values


def diff_forward(df, col, minutes):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ n ‡∏ô‡∏≤‡∏ó‡∏µ)"""
    left = df[['datetime5mins', col]].copy()
    left['lookup_time'] = left['datetime5mins'] + pd.Timedelta(minutes=minutes)

    right = df[['datetime5mins', col]].rename(
        columns={'datetime5mins': 'dt_ref', col: f'{col}_ref'}
    ).sort_values('dt_ref')

    merged = pd.merge_asof(
        left.sort_values('lookup_time'),
        right, left_on='lookup_time', right_on='dt_ref',
        direction='forward', allow_exact_matches=True
    )

    return merged[f'{col}_ref'].values - left[col].values


# ======================================================
# ‚õΩ 4Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ diff ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
# ======================================================
col = '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ôavg'

# ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (ago)
df_result['fuel_diff_5min_ago'] = diff_backward(df_result, col, 5)
df_result['fuel_diff_60min_ago'] = diff_backward(df_result, col, 60)

# ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (next)
df_result['fuel_diff_next_5min'] = diff_forward(df_result, col, 5)
df_result['fuel_diff_next_60min'] = diff_forward(df_result, col, 60)

# ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤ NaN ‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå (‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏ô/‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
df_result = df_result.fillna(0)

# ======================================================
# üö® 5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
# ======================================================

# ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÉ‡∏ô 60 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ "‡∏•‡∏î‡∏•‡∏á" ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
df_result['fuel_next_60mins_less_than_avg'] = df_result.apply(
    lambda row: "yes" if row['fuel_diff_next_60min'] < 0 else "no",
    axis=1
)

# ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏•‡∏¥‡∏ï‡∏£‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡πÄ‡∏ï‡∏¥‡∏°/‡∏î‡∏π‡∏î‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô)
df_result['decrease_5litres'] = df_result.apply(
    lambda row: "yes" if row['fuel_diff_5min_ago'] < -5 else "no",
    axis=1
)

# ======================================================
# ‚úÖ 6Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
# ======================================================
print(df_result.head())
print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(df_result)} ‡πÅ‡∏ñ‡∏ß")
#‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á plot x = 5minago and y = r=fuel rate 
#‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏±‡∏°‡∏∞‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏¢‡∏¢‡∏∞ 
import pandas as pd

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå datetime ‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡πâ‡∏ß
start_time = pd.Timestamp("2025-09-13 00:00:00")
end_time   = pd.Timestamp("2025-09-13 23:59:59")

df_filtered = df_result[
    (df_result['datetime5mins'] >= start_time) &
    (df_result['datetime5mins'] <= end_time)
].copy()

print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(df_filtered)} ‡πÅ‡∏ñ‡∏ß")
df_filtered


import matplotlib.pyplot as plt
from matplotlib import rcParams

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Tahoma
rcParams['font.family'] = 'Tahoma'

# üîπ ‡∏û‡∏•‡πá‡∏≠‡∏ï Scatter Plot
plt.figure(figsize=(10, 6))
plt.scatter(
    df_filtered['fuel_diff_5min_ago'],
    df_filtered['fuel_diff_next_5min'],
    c='tab:blue', alpha=0.7, edgecolors='k'
)

plt.title("Scatter: Fuel Diff (5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤) vs fuel_diff_next_5min	", fontsize=14)
plt.xlabel("‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏•‡∏¥‡∏ï‡∏£)", fontsize=12)
plt.ylabel("fuel_diff_next_5min	", fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()
import matplotlib.pyplot as plt
from matplotlib import rcParams
import numpy as np
from scipy.stats import norm

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô Tahoma
rcParams['font.family'] = 'Tahoma'

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = df_filtered['fuel_diff_5min_ago'].dropna()

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ mean ‡πÅ‡∏•‡∏∞ std
mean = data.mean()
std = data.std()

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Å‡∏ô X ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á normal distribution
x = np.linspace(data.min(), data.max(), 200)
pdf = norm.pdf(x, mean, std)

# üîπ ‡∏û‡∏•‡πá‡∏≠‡∏ï histogram + ‡πÄ‡∏™‡πâ‡∏ô normal distribution
plt.figure(figsize=(10,6))
plt.hist(data, bins=30, density=True, alpha=0.6, color='tab:blue', edgecolor='black', label='Histogram')
plt.plot(x, pdf, color='red', linewidth=2, label=f'Normal(Œº={mean:.2f}, œÉ={std:.2f})')

plt.title("‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Fuel Diff (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏ô‡∏≤‡∏ó‡∏µ)", fontsize=14)
plt.xlabel("Fuel Diff 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏•‡∏¥‡∏ï‡∏£)", fontsize=12)
plt.ylabel("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô (Density)", fontsize=12)
plt.legend()
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
import matplotlib.pyplot as plt
from matplotlib import rcParams
from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler
import numpy as np

# üß© ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
rcParams['font.family'] = 'Tahoma'

# üîπ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
X = df_filtered[['fuel_diff_5min_ago', 'fuel_diff_next_5min']].dropna().values

# üîπ ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DBSCAN)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• DBSCAN
# ‡∏õ‡∏£‡∏±‡∏ö eps / min_samples ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° density ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
db = DBSCAN(eps=0.5, min_samples=3).fit(X_scaled)

# üîπ ‡∏î‡∏∂‡∏á labels ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
labels = db.labels_

# üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô df
df_clustered = df_filtered.dropna(subset=['fuel_diff_5min_ago', 'fuel_diff_next_5min']).copy()
df_clustered['cluster'] = labels

# üîπ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
n_noise = list(labels).count(-1)
print(f"‚úÖ ‡∏û‡∏ö {n_clusters} ‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå | ‡∏à‡∏∏‡∏î Noise: {n_noise}")

# üîπ ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
plt.figure(figsize=(10, 6))

# ‡∏™‡∏£‡πâ‡∏≤‡∏á colormap ‡∏ï‡∏≤‡∏° cluster
unique_labels = set(labels)
colors = plt.cm.get_cmap('tab10', len(unique_labels))

for k in unique_labels:
    class_member_mask = (labels == k)
    xy = X[class_member_mask]
    if k == -1:
        # noise (outliers)
        plt.scatter(xy[:, 0], xy[:, 1], c='gray', marker='x', label='Noise')
    else:
        plt.scatter(xy[:, 0], xy[:, 1], color=colors(k), alpha=0.7, edgecolors='k', label=f'Cluster {k}')

plt.title("DBSCAN Clustering: fuel_diff_5min_ago vs fuel_diff_next_5min", fontsize=14)
plt.xlabel("fuel_diff_5min_ago")
plt.ylabel("fuel_diff_next_5min")
plt.legend()
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()
# ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 1: fuel_diff_next_60min > 0
df_clustered = df_clustered[df_clustered['fuel_diff_next_60min'] < 0]
df_clustered = df_clustered[df_clustered['fuel_diff_60min_ago'] < 0]


# ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á diff ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5min ‡πÅ‡∏•‡∏∞ 60min ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 10
df_clustered = df_clustered[(df_clustered['fuel_diff_5min_ago'] - df_clustered['fuel_diff_60min_ago']).abs() < 5]
df_clustered = df_clustered[(df_clustered['fuel_diff_next_5min'] - df_clustered['fuel_diff_next_60min']).abs() < 5]